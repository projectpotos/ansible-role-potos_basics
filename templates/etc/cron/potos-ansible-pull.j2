#!/bin/sh
# Pulls the latest potos playbook and then continues to run
# them against localhost. Notification and warning is displayed to the end user
# if machine has not been rebooted for more than 10 days and if Ansible rant
# into issues.
# {{ ansible_managed }}


# Check if working directory exists
[ -d '{{ potos_basics_ansible_workdir }}' ] || mkdir -p {{ potos_basics_ansible_workdir }}
cd {{ potos_basics_ansible_workdir }}

# If directory is git repository, then pull latest changes
if [ -d '.git' ] && [ -n "$(git remote)" ]; then
    git pull origin {{ potos_basics_playbook_version }} \
        >> {{ potos_basics_ansible_logdir }}/{{ runtype }} 2>&1
    # If git branch is wrong, checkout the correct one
    if [ "$(git branch | grep -E '^\*' | awk '{print $2}')" != "{{ potos_basics_playbook_version }}" ]; then
        git checkout {{ potos_basics_playbook_version }} \
            >> {{ potos_basics_ansible_logdir }}/{{ runtype }} 2>&1
    fi
# If directory is NOT git repository, then clone it
else
    git clone \
        -b {{ potos_basics_playbook_version }} \
        https://github.com/projectpotos/ansible-plays-potos.git \
        {{ potos_basics_ansible_workdir }} \
        >> {{ potos_basics_ansible_logdir }}/{{ runtype }} 2>&1
fi

# Run Ansible with custom ansible.cfg, use flock to prevent concurrent runs
ANSIBLE_CONFIG={{ potos_basics_ansible_workdir }}/ansible.cfg \
exec {flockfd}<-/var/lock/potos-ansible.lock
flock -x "$flockfd"
ansible-playbook -i /etc/ansible/inventory/potos_inventory prepare.yml -e "potos_runtype={{ runtype }}"> /dev/null
ansible-playbook -i /etc/ansible/inventory/potos_inventory playbook.yml -e "potos_runtype={{ runtype }}"> /dev/null
exec {flockfd}<&-

# Check for Ansible failures in ansible.log
if [ "0" -ne "$(test -e {{ potos_basics_ansible_logdir }}/{{ runtype }} && grep failed= {{ potos_basics_ansible_logdir }}/{{ runtype }} | tail -n1 | sed -e 's/.*failed=\([0-9]\+\).*/\1/')" ]; then
    ANSIBLE_MESSAGE="Attention Ansible {{ runtype }} cronjob failed"
    /usr/bin/notify-send -u critical --expire-time=0 "${ANSIBLE_MESSAGE}"
    /usr/bin/wall "${ANSIBLE_MESSAGE}"
fi
